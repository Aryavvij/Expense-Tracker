1. Introduction and Project Goal
The project began as a single-user expense tracker and was successfully upgraded to a secure, multi-user application. The primary goal was to provide every user with a private, segmented dashboard where their financial data is completely isolated from all other users.
The final result is a production-ready, full-stack application built using the MERN architecture.

2. Core Application Functionality
The Expense Tracker provides a robust set of features critical for personal financial management:
Monthly Scoping: All data—budgets, categories, and expenses—are unique to the selected Month and Year, allowing for continuous, organized tracking.
Granular Budgeting: Users can set a single Total Budget and define multiple Category Limits (e.g., Food, Transport), tracked via full CRUD (Create, Read, Update, Delete) capabilities.
Real-Time Analytics: The dashboard provides instant calculations of Total Budget, Total Spent, and Remaining Budget based on the user's data for the current period.
Design & UX: Features a clean, Classy Navy Blue and Cream aesthetic with a strict, responsive grid layout for professional readability.

3. Security and Multi-User Architecture (The Merge)
This section represents the most significant technical advancement of the project:

A. Backend Security Implementation
Authentication Mechanism: Implemented secure user sessions using JSON Web Tokens (JWT) for session management and Bcrypt.js for secure password hashing during registration and login.
Protected Endpoints: Every single API route dealing with financial data (/summary, /categories, /expenses) is protected by a custom Express Middleware that verifies the JWT in the request header.
User Isolation (Multi-Tenancy): Every database query (GET, POST, PUT, DELETE) is filtered using the authenticated userId extracted from the JWT. This guarantees that User A cannot see, modify, or delete data belonging to User B.

B. Database Structure Change
User Model: A new User model was created to store hashed passwords and unique emails.
Data Linking: The existing category.model.js and expense.model.js files were updated to include a mandatory userId foreign key, enforcing the secure link between every financial record and its owner.

4. Resolution of Critical Development Hurdles (Proof of Skill)
The project required overcoming several complex issues necessary for stable deployment:
Fatal Initialization Crash: The script was crashing because the initialSetup function was running before key functions (like loadDataForMonth) were defined, causing a critical ReferenceError. This was resolved by reordering the entire script.js file to ensure functions are defined sequentially, fixing the UI initialization crash and making buttons functional.
Database Index Conflict (E11000): During the merge, the application failed because the MongoDB index was not expecting multiple users to create a "Total Budget" for the same month. This was resolved by deleting the old index and updating the Mongoose schema to include userId in the unique index definition (name_1_month_1_year_1_userId_1).
Final Redirection Loop: The application was stuck redirecting from Login to Dashboard and back. This was resolved by standardizing all internal redirects to absolute paths (/index.html, /dashboard.html) and streamlining the checkAuth logic to eliminate confusion over the page file names.

API URL - https://expense-tracker-v5ei.onrender.com
Site Link - https://expense-tracker-seven-omega-89.vercel.app
Code Repository Link - https://github.com/Aryavvij/Expense-Tracker.git